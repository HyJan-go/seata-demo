#transport {
#  # tcp udt unix-domain-socket
#  type = "TCP"
#  #NIO NATIVE
#  server = "NIO"
#  #enable heartbeat
#  heartbeat = true
#  #thread factory for netty
#  thread-factory {
#    boss-thread-prefix = "NettyBoss"
#    worker-thread-prefix = "NettyServerNIOWorker"
#    server-executor-thread-prefix = "NettyServerBizHandler"
#    share-boss-worker = false
#    client-selector-thread-prefix = "NettyClientSelector"
#    client-selector-thread-size = 1
#    client-worker-thread-prefix = "NettyClientWorkerThread"
#    # netty boss thread size,will not be used for UDT
#    boss-thread-size = 1
#    #auto default pin or 8
#    worker-thread-size = 8
#  }
#  shutdown {
#    # when destroy server, wait seconds
#    wait = 3
#  }
#  serialization = "seata"
#  compressor = "none"
#}

service {
  #vgroup->rgroup
  vgroup_mapping.fsp_tx_group = "default"
  #only support single node
  default.grouplist = "127.0.0.1:8091"
  #degrade current not support
  enableDegrade = false
  #disable
  disable = false
  #unit ms,s,m,h,d represents milliseconds, seconds, minutes, hours, days, default permanent
  max.commit.retry.timeout = "-1"
  max.rollback.retry.timeout = "-1"
#  disableGlobalTransaction = false
}

## transaction log store
store {
  ## store mode: file、db
  mode = "db" #修改此处将事务信息存储到数据库中

  ## database store
  db {
    ## the implement of javax.sql.DataSource, such as DruidDataSource(druid)/BasicDataSource(dbcp) etc.
    datasource = "dbcp"
    ## mysql/oracle/h2/oceanbase etc.
    db-type = "mysql"
    driver-class-name = "com.mysql.jdbc.Driver"
    url = "jdbc:mysql://localhost:3306/seata-server" #修改数据连接地址
    user = "root" #修改数据库用户名
    password = "root" #修改数据库密码
    min-conn = 1
    max-conn = 3
    global.table = "global_table"
    branch.table = "branch_table"
    lock-table = "lock_table"
    query-limit = 100
  }
}

client {
  async.commit.buffer.limit = 10000
  lock {
    retry.internal = 10
    retry.times = 30
  }
  report.retry.count = 5
  tm.commit.retry.count = 1
  tm.rollback.retry.count = 1
}

#transaction {
#  undo.data.validation = true
#  undo.log.serialization = "jackson"
#  undo.log.save.days = 7
#  #schedule delete expired undo_log in milliseconds
#  undo.log.delete.period = 86400000
#  undo.log.table = "undo_log"
#}
#
#support {
#  ## spring
#  spring {
#    # auto proxy the DataSource bean
#    datasource.autoproxy = false
#  }
# }